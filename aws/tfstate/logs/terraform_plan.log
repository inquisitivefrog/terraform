
tim@Tims-MBP tfstate % terraform plan -out backup

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_dynamodb_table.terraform_locks will be created
  + resource "aws_dynamodb_table" "terraform_locks" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "terraform-locks"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = (known after apply)
      + write_capacity   = (known after apply)

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # aws_s3_bucket.state_bucket will be created
  + resource "aws_s3_bucket" "state_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bluedragon-employer-prod"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket_acl.state_bucket_acl will be created
  + resource "aws_s3_bucket_acl" "state_bucket_acl" {
      + acl    = "private"
      + bucket = (known after apply)
      + id     = (known after apply)

      + access_control_policy (known after apply)
    }

  # aws_s3_bucket_ownership_controls.ownership will be created
  + resource "aws_s3_bucket_ownership_controls" "ownership" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + object_ownership = "ObjectWriter"
        }
    }

  # aws_s3_bucket_public_access_block.block_public_access will be created
  + resource "aws_s3_bucket_public_access_block" "block_public_access" {
      + block_public_acls       = false
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = false
      + restrict_public_buckets = true
    }

  # aws_s3_bucket_server_side_encryption_configuration.state_bucket_encryption will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "state_bucket_encryption" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm     = "AES256"
                # (1 unchanged attribute hidden)
            }
        }
    }

  # aws_s3_bucket_versioning.state_bucket_versioning will be created
  + resource "aws_s3_bucket_versioning" "state_bucket_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

Plan: 7 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: backup

To perform exactly these actions, run the following command to apply:
    terraform apply "backup"

tim@Tims-MBP tfstate % terraform plan -out backup
aws_dynamodb_table.terraform_locks: Refreshing state... [id=terraform-locks]
aws_s3_bucket.state_bucket: Refreshing state... [id=bluedragon-employer-prod]
aws_s3_bucket_public_access_block.block_public_access: Refreshing state... [id=bluedragon-employer-prod]
aws_s3_bucket_versioning.state_bucket_versioning: Refreshing state... [id=bluedragon-employer-prod]
aws_s3_bucket_ownership_controls.ownership: Refreshing state... [id=bluedragon-employer-prod]
aws_s3_bucket_server_side_encryption_configuration.state_bucket_encryption: Refreshing state... [id=bluedragon-employer-prod]
aws_s3_bucket_acl.state_bucket_acl: Refreshing state... [id=bluedragon-employer-prod,private]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket_lifecycle_configuration.state_bucket_lifecycle will be created
  + resource "aws_s3_bucket_lifecycle_configuration" "state_bucket_lifecycle" {
      + bucket = "bluedragon-employer-prod"
      + id     = (known after apply)

      + rule {
          + id     = "move_to_glacier"
          + status = "Enabled"

          + noncurrent_version_expiration {
              + noncurrent_days = 365
            }

          + noncurrent_version_transition {
              + noncurrent_days           = 1
              + storage_class             = "GLACIER"
                # (1 unchanged attribute hidden)
            }
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: backup

To perform exactly these actions, run the following command to apply:
    terraform apply "backup"

